#!/usr/bin/env python
import argparse
import os

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' 
os.environ['TF_FORCE_GPU_ALLOW_GROWTH'] = 'true'
os.environ["TOTALSEG_WEIGHTS_PATH"] = "models/"

from comp2comp.inference_pipeline import InferencePipeline
from comp2comp.io.io import DicomToNifti
from comp2comp.muscle_adipose_tissue.muscle_adipose_tissue import (
    MuscleAdiposeTissueComputeMetrics,
    MuscleAdiposeTissueH5Saver,
    MuscleAdiposeTissueMetricsSaver,
    MuscleAdiposeTissuePostProcessing,
    MuscleAdiposeTissueSegmentation,
)
from comp2comp.muscle_adipose_tissue.muscle_adipose_tissue_visualization import (
    MuscleAdiposeTissueVisualizer,
)
from comp2comp.organs.organs import OrganSegmentation
from comp2comp.organs.visualization import (
    LiverSpleenPancreasMetricsPrinter,
    LiverSpleenPancreasVisualizer,
)
from comp2comp.spine.spine import (
    SpineComputeROIs,
    SpineCoronalSagittalVisualizer,
    SpineFindDicoms,
    SpineMetricsSaver,
    SpineMuscleAdiposeTissueReport,
    SpineSegmentation,
    SpineToCanonical,
)
from comp2comp.utils.process import process_3d

os.environ["CUDA_DEVICE_ORDER"] = "PCI_BUS_ID"

def CombinedPipelineBuilder(path, args):
    pipeline = InferencePipeline([
        DicomToNifti(path),
        OrganSegmentation(),
        LiverSpleenPancreasVisualizer(),
        LiverSpleenPancreasMetricsPrinter(),
        SpineSegmentation(),
        SpineToCanonical(),
        SpineComputeROIs(),
        SpineMetricsSaver(),
        SpineCoronalSagittalVisualizer(),
        SpineFindDicoms(),
        MuscleAdiposeTissueSegmentation(),
        MuscleAdiposeTissuePostProcessing(),
        MuscleAdiposeTissueComputeMetrics(),
        MuscleAdiposeTissueVisualizer(),
        MuscleAdiposeTissueH5Saver(),
        MuscleAdiposeTissueMetricsSaver(),
        SpineMuscleAdiposeTissueReport()
        ]
    )
    return pipeline

def argument_parser():
    parser = argparse.ArgumentParser("Comp2Comp command line interface")
    parser.add_argument(
        "--input_path",
        required=True,
        type=str,
        help="path to input directory or file",
    )
    return parser

if __name__ == "__main__":
    print("\nModified, lighweight version of Comp2Comp. Only predefined pipeline.\n")
    args = argument_parser().parse_args()
    process_3d(args, CombinedPipelineBuilder)

